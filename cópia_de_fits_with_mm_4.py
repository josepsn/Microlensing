# -*- coding: utf-8 -*-
"""Cópia de Fits With MM - 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1umlEoyYzcPMu0PIveY6xH2SHkTM0tWRt

# Parte 1: Recebendo os dados
"""

pip install MulensModel

import MulensModel as mm
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
from MulensModel import MulensData

# Especifique o caminho para o arquivo de dados
caminho_arquivo1 = '/content/phot_ob08092_O4.dat.txt'

# Crie um objeto MulensData a partir do arquivo
dados1 = MulensData(file_name=caminho_arquivo1)

"""# Parte 2: Estimativa dos parâmetros"""

from MulensModel import Model

t_0 = 5.37956728e+03
u_0 = 5.28523503e-01
t_E = 1.78236009e+01

#PLOT DOS DADOS NA MESMA ESCALA DO SITE!!
plt.figure(figsize=(10, 6))
plt.style.use('ggplot')
plt.xlabel('Time(HJD)', fontsize=15)
plt.ylabel('Magnitude', fontsize=15)
plt.legend(fontsize=10)

pspl_model = mm.Model({'t_0': t_0, 'u_0': u_0, 't_E': t_E})
my_event1 = mm.Event(datasets=[dados1], model=pspl_model)
my_event1.plot_data(color = 'b')
my_event1.plot_model()

plt.show()

"""# Parte 3: O começo do fit (Chi^2)"""

chi2_initial = my_event1.get_chi2()
print(my_event1.model.parameters)
print("give chi^2 of {:.2f}.".format(chi2_initial))

parameters_to_fit = ["t_0", "u_0", "t_E"]
initial_guess = [t_0, u_0, t_E]

def chi2_for_model(theta, event, parameters_to_fit):
    """
    for given event set attributes from parameters_to_fit
    (list of str) to values from the theta list
    """
    for (key, parameter) in enumerate(parameters_to_fit):
        setattr(event.model.parameters, parameter, theta[key])
    return event.get_chi2()

import scipy.optimize as op
result = op.minimize(chi2_for_model, x0=initial_guess,
        args=(my_event1, parameters_to_fit), method='Nelder-Mead')

print("Fitting was successful? {:}".format(result.success))
if not result.success:
    print(result.message)
print("Function evaluations: {:}".format(result.nfev))
if isinstance(result.fun, np.ndarray):
    if result.fun.ndim == 0:
        result_fun = float(result.fun)
    else:
        result_fun = result.fun[0]
else:
    result_fun = result.fun
print("The smallest function value: {:.3f}".format(result_fun))
print("for parameters: {:.5f} {:.4f} {:.3f}".format(*result.x.tolist()))

"""Note que, dessa vez, os valores obtidos a partir do fit usado pelo MulensModel concordaram muito mais com os parâmetros obtidos pelo 'Meu Fit'. O mesmo ocorreu para o Chi^2, que apresentou um diferença de 0.046 
$$
\begin{aligned}
t_0 = 5379.57091 \\
u_0 = 0.5230 \\
t_E = 17.940$ \\
\end{aligned}
$$

Graus de liberdade + Chi^2 efetivo:
"""

Chi_Qef1 =  427.204/(383-3)
print("", Chi_Qef1)

"""# Parte 4: Plot da curva fitada + Residual"""

t_0_f = 5379.57091
u_0_f = 0.5230
t_E_f = 17.940

import numpy as np

# abre o arquivo e lê os dados
with open('/content/phot_ob08092_O4.dat.txt', 'r') as f:
    dados = f.readlines()

# cria uma lista vazia para armazenar os dados da coluna
t = []
magnit_obs = []
# itera sobre cada linha do arquivo de dados e adiciona o valor da coluna à lista
for linha in dados:
    valores = linha.strip().split()
    t.append(float(valores[0]))  # supondo que a segunda coluna contém os dados desejados

t = np.array(t)

for linha in dados:
    valores = linha.strip().split()
    magnit_obs.append(float(valores[1]))

# converte a lista em uma matriz NumPy

magnit_obs = np.array(magnit_obs)

#Definindo os parâmetros a serem fitados!
def model_pspl(t_0, u_0, t_E, t):
  m_0 = 1.39290264e+01
  T = (t-t_0_f)/t_E_f
  magnif = (u_0_f**2 + T**2 + 2)/(((u_0_f**2 + T**2)*(T**2 + u_0_f**2 + 4)) ** 0.5) # Magnificação de acordo com o modelo PSPL

  magnit = m_0 - 2.5*np.log10(magnif)
  return magnit

x = np.linspace(5200, 5900, 10000)
magnit_inicial = model_pspl(t_0, u_0, t_E, x)
magnit_final = model_pspl(t_0_f, u_0_f, t_E_f, x)

#PLOT DOS DADOS NA MESMA ESCALA DO SITE!!
plt.figure(figsize=(10, 6))
plt.style.use('ggplot')
plt.xlabel('Time(HJD)', fontsize=15)
plt.ylabel('Magnitude', fontsize=15)
plt.legend(fontsize=10)

plt.plot(x, magnit_final, label = 'Mulens fit', c='k')
plt.plot(x, magnit_inicial, label = '"José" fit', c='r')

# Finally: data, legend, and show the plot:
my_event1.plot_data(color = 'g', alpha=0.15)
plt.legend(loc='best')
plt.show

"""Gráfico do Residual"""

#RESIDUAL:
m_0 = 1.39290264e+01
T = (t-t_0_f)/t_E_f
magnif = (u_0_f**2 + T**2 + 2)/(((u_0_f**2 + T**2)*(T**2 + u_0_f**2 + 4)) ** 0.5) # Magnificação de acordo com o modelo PSPL

magnit_cal = m_0 - 2.5*np.log10(magnif)

plt.figure(figsize=(10, 6))
plt.style.use('ggplot')
res_1 = magnit_cal - magnit_obs
x = np.linspace(5300, 5800, len(res_1))
plt.scatter(x, res_1)